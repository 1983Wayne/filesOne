;;; Create a program that spells out large numbers.

(define thousands '(thousand million billion trillion quadrillion quintillion sextillion septillion octillion nonillion decillion))

(define tens '(ten twenty thirty fourty fifty sixty seventy eighty ninety))

(define teens '(eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen))

(define ones '(one two three four five six seven eight nine zero))

(define (pick-ones number)
  (if (equal? number 0)
      (se (item 10 ones))
      (se (item number ones))))

(define (pick-teens number)
  (item (last number) teens))

(define (pick-tens number)
  (se (item (first number) tens) (if (> (last number) 0)
                                     (pick-ones (last number))
                                     '())))

(define (pick-hundred number)
  (cond ((equal? (count number) 3) (se (pick-ones (first number)) 'hundred (pick-hundred (bf number))))
        ((equal? number "") '())
        ((> number 19) (se (pick-tens number)))
        ((> number 10) (se (pick-teens number)))
        ((= number 10) (se 'ten))
        ((= number 0) '())
        (else (pick-ones number))))

(define (number-name-helper n number)
   (cond ((equal? n 0) (pick-hundred number))
         ((>= n 1) (se (pick-hundred ((repeated bl (* 3 n)) number))
                       (item n thousands)
                       (number-name-helper (- n 1) (cond ((equal? (remainder (count number) 3) 0) ((repeated bf 3) number))
                                                         ((equal? (remainder (count number) 2) 0) ((repeated bf 2) number))
                                                         (else (bf number))))))
         (else '())))
                                   
(define (number-name number)
  (number-name-helper (if (> (count number) 3)
                          (cond ((> (count number) 27) 9)
                                ((> (count number) 24) 8)
                                ((> (count number) 21) 7)
                                ((> (count number) 18) 6)
                                ((> (count number) 15) 5)
                                ((> (count number) 12) 4)
                                ((> (count number) 9) 3)
                                ((> (count number) 6) 2)
                                ((> (count number) 3) 1))
                          0)
                      number))
